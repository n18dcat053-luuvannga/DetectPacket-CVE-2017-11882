from datetime import datetime
import json
import logging
import pyshark
import csv
from logfmter import Logfmter

def capture_live_packets(network_interface):
    capture = pyshark.LiveCapture(interface=network_interface, display_filter="tcp")


    for raw_packet in capture.sniff_continuously():
        
        p = get_packet_details(raw_packet)
        if isAttackdownload(p):
            time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            string = time + "[Warning] Virus detected file" 
            print(string,"\n")

        elif isAttackPacket(p):
            time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            string = time+" [Warning] sr IP:"+p['source_address']+" remote code to dst IP:"+p['destination_address']\
			+" CVE-2017-11882 DETECTED"
            print(string,"\n")
            with open('lognew.txt', 'a') as log:
                log.write(string)
                log.write("\n")
        
def isAttackdownload(p):
    if p['packet_data'] is None:
        return False
    data = str(p['packet_data'])
    if 'rtf1' in data:
        return True
    return False


def isAttackPacket(p):
	if p['packet_data'] is None:
		return False
	data = str(p['packet_data'])
	# if "MZARUH" and "This program cannot be run in DOS mode" in data:
	if 	"VBScript" in data and "powershell.exe" in data:
		return True
	# elif "MZARUH" and "This program cannot be run in DOS mode" in data:
	# 	return True
	return False

def getTCPPayload(packet):
	if 'tcp' in packet:
		if 'tcp.payload' in packet.tcp._all_fields:
			a=str(packet.tcp.payload)
			tcpPayload = a.replace(':','')
			data = bytes.fromhex(tcpPayload)
			return data.decode('utf-8', 'replace').encode('cp850','replace').decode('cp850')\
				.replace('\n','').replace('\t','')\
				.replace('\r','').replace('\\x', '')\
				.replace(',', '|')
	return ''
    
def get_packet_details(packet):

	protocol = packet.transport_layer
	source_address = packet.ip.src
	source_port = packet[packet.transport_layer].srcport
	destination_address = packet.ip.dst
	destination_port = packet[packet.transport_layer].dstport
	packet_time = packet.sniff_time
	packet_data = str(getTCPPayload(packet)).encode('utf-8')
	f = open('result-traffic.csv', 'a')
	writer = csv.writer(f, delimiter=',',lineterminator='\n')
	row = [protocol, source_address, source_port, destination_address, destination_port, packet_time, packet_data]
	writer.writerow(row)
	return {
		"protocol":protocol, 
		"source_address":source_address, 
		"source_port":source_port, 
		"destination_address":destination_address, 
		"destination_port":destination_port, 
		"packet_time":packet_time, 
		"packet_data":packet_data
	}



print('-- Restart Capture --')
try:
	capture_live_packets('VMware Network Adapter VMnet8')
except Exception as e:
	print(e)